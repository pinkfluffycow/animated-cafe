import {tiny, defs} from './examples/common.js';
import {Cloth_Simulation} from "./cloth_simulation.js";

// Pull these names into this module's scope for convenience:
const { vec3, vec4, color, Mat4, Shader, Texture, Component } = tiny;

export
const Midpoint_Demo_Base = defs.Midpoint_Demo_Base =
    class Midpoint_Demo_Base extends Component
    {
      init()
      {
        console.log("init")

        // constructor(): Scenes begin by populating initial values like the Shapes and Materials they'll need.
        this.hover = this.swarm = false;

        // At the beginning of our program, load one of each of these shape
        // definitions onto the GPU.  NOTE:  Only do this ONCE per shape it
        // would be redundant to tell it again.  You should just re-use the
        // one called "box" more than once in display() to draw multiple cubes.
        // Don't define more than one blueprint for the same thing here.
        this.shapes = {
          'box'  : new defs.Cube(),
          'ball' : new defs.Subdivision_Sphere( 4 ),
          'axis' : new defs.Axis_Arrows()
        };

        // *** Materials: ***  A "material" used on individual shapes specifies all fields
        // that a Shader queries to light/color it properly.  Here we use a Phong shader.
        // We can now tweak the scalar coefficients from the Phong lighting formulas.
        // Expected values can be found listed in Phong_Shader::update_GPU().
        const phong = new defs.Phong_Shader();
        const tex_phong = new defs.Textured_Phong();
        const fake_bump = new defs.Fake_Bump_Map();

        this.materials = {};
        this.materials.plastic = { shader: phong, ambient: .2, diffusivity: 1, specularity: .5, color: color( .9,.5,.9,1 ) }
        this.materials.metal   = { shader: phong, ambient: .2, diffusivity: 1, specularity:  1, color: color( .9,.5,.9,1 ) }
        this.materials.rgb = { shader: tex_phong, ambient: .5, texture: new Texture( "assets/rgb.jpg" ) }
        this.materials.cloth = {
          shader: tex_phong,
          ambient: 0.8,
          diffusivity: 1,
          specularity: 0.01,
          texture: new Texture("assets/blue_fabric.jpg")
        }

        // TODO: grass texture?
        this.materials.grass = {
          shader: tex_phong,
          ambient: 0.8,
          diffusivity: 1,
          specularity: 0,
          texture: new Texture("assets/grass.jpg")
        }


        // Initialize cloth simulation
        const width = 3, height = 6;
        const density = 3;
        const n = density * height + 1, m = density * width + 1;
        const offset = vec3(0.5, 4-0.15, 0)
        let dx = width / (m - 1), dy = height / (n - 1);

        this.cloth_sim = new Cloth_Simulation(width, height, n, m, offset);
            // tutorial: 14, 10, 55, 45
        this.cloth_sim.initialize(0.5, 50, 1);

        // Fix endpoints
        for (let i = 0; i < 3; ++i) {
          this.cloth_sim.particles[0][i].isFixed = true;
          this.cloth_sim.particles[0][i].pos[0] += dx * 0.1;
          this.cloth_sim.particles[0][m - i - 1].isFixed = true;
          this.cloth_sim.particles[0][m - i - 1].pos[0] -= dx * 0.1;
        }

        this.isDrawingParticles = false;
        this.time_step = 0.05;


        // Initialize sheet
        const initial_corner_point = offset.plus(0, height, 0);
        const row_operation = (s,p) => p ? p.minus(vec3(0, dy, 0)) : initial_corner_point;
        const column_operation = (t,p) => p.plus(vec3(dx, 0, 0));
        this.shapes.sheet = new defs.Grid_Patch(
            n - 1,
            m - 1,
            row_operation,
            column_operation,
            [[0, width/8], [0, height/8]]
        );

        this.isDrawingBall = false;


        let heights = [
          [0.0118, 0.0196, 0.0235, 0.0314, 0.0431, 0.0549, 0.0667, 0.0824, 0.098, 0.1137, 0.1294, 0.1451, 0.1569, 0.1725, 0.1843, 0.1922, 0.2, 0.2039, 0.2078, 0.2078, 0.2039, 0.2039, 0.2, 0.1922, 0.1882, 0.1843, 0.1765, 0.1725, 0.1686, 0.1647, 0.1647, 0.1608, 0.1608, 0.1647, 0.1647, 0.1686, 0.1725, 0.1765, 0.1804, 0.1882, 0.1922, 0.2, 0.2078, 0.2157, 0.2235, 0.2314, 0.2431, 0.2549, 0.2667, 0.2784, 0.2902, 0.302, 0.3137, 0.3255, 0.3333, 0.3373, 0.3451, 0.3451, 0.3451, 0.3412, 0.3373, 0.3333, 0.3294, 0.3255],
          [0.0157, 0.0235, 0.0314, 0.0392, 0.051, 0.0667, 0.0824, 0.098, 0.1137, 0.1333, 0.1529, 0.1725, 0.1882, 0.2039, 0.2157, 0.2275, 0.2353, 0.2431, 0.2471, 0.2471, 0.2471, 0.2431, 0.2392, 0.2353, 0.2314, 0.2235, 0.2196, 0.2157, 0.2118, 0.2078, 0.2039, 0.2039, 0.2039, 0.2039, 0.2078, 0.2118, 0.2157, 0.2196, 0.2235, 0.2314, 0.2353, 0.2431, 0.251, 0.2588, 0.2667, 0.2745, 0.2863, 0.298, 0.3098, 0.3216, 0.3333, 0.3451, 0.3569, 0.3686, 0.3765, 0.3843, 0.3882, 0.3922, 0.3922, 0.3882, 0.3843, 0.3804, 0.3725, 0.3686],
          [0.0235, 0.0275, 0.0392, 0.051, 0.0627, 0.0784, 0.098, 0.1176, 0.1412, 0.1608, 0.1843, 0.2039, 0.2275, 0.2431, 0.2588, 0.2706, 0.2824, 0.2902, 0.2941, 0.2941, 0.2941, 0.2941, 0.2902, 0.2824, 0.2784, 0.2745, 0.2667, 0.2627, 0.2588, 0.2549, 0.2549, 0.251, 0.251, 0.2549, 0.2549, 0.2588, 0.2627, 0.2667, 0.2745, 0.2784, 0.2863, 0.2902, 0.298, 0.3059, 0.3176, 0.3255, 0.3373, 0.349, 0.3608, 0.3725, 0.3882, 0.4, 0.4118, 0.4235, 0.4314, 0.4392, 0.4431, 0.4471, 0.4431, 0.4431, 0.4392, 0.4314, 0.4275, 0.4196],
          [0.0275, 0.0353, 0.0471, 0.0588, 0.0784, 0.098, 0.1176, 0.1412, 0.1686, 0.1922, 0.2196, 0.2431, 0.2667, 0.2902, 0.3098, 0.3216, 0.3333, 0.3451, 0.349, 0.3529, 0.3529, 0.349, 0.3451, 0.3412, 0.3373, 0.3294, 0.3255, 0.3216, 0.3176, 0.3137, 0.3137, 0.3098, 0.3098, 0.3137, 0.3137, 0.3176, 0.3216, 0.3255, 0.3294, 0.3373, 0.3412, 0.349, 0.3569, 0.3647, 0.3725, 0.3843, 0.3961, 0.4078, 0.4196, 0.4353, 0.4471, 0.4588, 0.4706, 0.4824, 0.4941, 0.498, 0.502, 0.5059, 0.5059, 0.502, 0.498, 0.4902, 0.4863, 0.4784],
          [0.0353, 0.0471, 0.0588, 0.0745, 0.0941, 0.1176, 0.1412, 0.1686, 0.2, 0.2314, 0.2627, 0.2902, 0.3176, 0.3412, 0.3647, 0.3804, 0.3961, 0.4039, 0.4118, 0.4157, 0.4157, 0.4118, 0.4118, 0.4039, 0.4, 0.3961, 0.3922, 0.3843, 0.3804, 0.3804, 0.3765, 0.3765, 0.3765, 0.3765, 0.3804, 0.3843, 0.3882, 0.3922, 0.3961, 0.4, 0.4078, 0.4157, 0.4235, 0.4314, 0.4392, 0.4471, 0.4588, 0.4706, 0.4824, 0.498, 0.5098, 0.5255, 0.5373, 0.549, 0.5608, 0.5647, 0.5686, 0.5725, 0.5686, 0.5686, 0.5608, 0.5569, 0.549, 0.5412],
          [0.0392, 0.051, 0.0667, 0.0863, 0.1098, 0.1373, 0.1686, 0.2, 0.2353, 0.2667, 0.3059, 0.3373, 0.3725, 0.4, 0.4235, 0.4431, 0.4588, 0.4706, 0.4784, 0.4824, 0.4824, 0.4824, 0.4784, 0.4745, 0.4706, 0.4627, 0.4588, 0.4549, 0.451, 0.451, 0.4471, 0.4471, 0.4471, 0.4471, 0.451, 0.4549, 0.4588, 0.4627, 0.4667, 0.4706, 0.4784, 0.4824, 0.4902, 0.498, 0.5059, 0.5176, 0.5255, 0.5373, 0.5529, 0.5647, 0.5765, 0.5922, 0.6039, 0.6157, 0.6235, 0.6314, 0.6353, 0.6353, 0.6353, 0.6314, 0.6275, 0.6235, 0.6157, 0.6118],
          [0.0471, 0.0627, 0.0784, 0.102, 0.1255, 0.1569, 0.1922, 0.2314, 0.2667, 0.3098, 0.349, 0.3882, 0.4275, 0.4588, 0.4863, 0.5098, 0.5255, 0.5412, 0.549, 0.5529, 0.5529, 0.5529, 0.549, 0.5451, 0.5412, 0.5333, 0.5294, 0.5255, 0.5255, 0.5216, 0.5216, 0.5216, 0.5216, 0.5216, 0.5255, 0.5255, 0.5294, 0.5333, 0.5373, 0.5412, 0.549, 0.5529, 0.5608, 0.5686, 0.5765, 0.5843, 0.5961, 0.6078, 0.6196, 0.6314, 0.6471, 0.6588, 0.6706, 0.6824, 0.6902, 0.698, 0.702, 0.702, 0.702, 0.698, 0.6941, 0.6902, 0.6824, 0.6784],
          [0.0549, 0.0706, 0.0902, 0.1137, 0.1451, 0.1804, 0.2196, 0.2627, 0.3059, 0.3529, 0.4, 0.4431, 0.4863, 0.5216, 0.5529, 0.5765, 0.5961, 0.6078, 0.6196, 0.6235, 0.6235, 0.6196, 0.6196, 0.6157, 0.6078, 0.6039, 0.6, 0.5961, 0.5961, 0.5922, 0.5922, 0.5922, 0.5922, 0.5961, 0.5961, 0.6, 0.6039, 0.6078, 0.6118, 0.6157, 0.6196, 0.6235, 0.6314, 0.6353, 0.6431, 0.651, 0.6627, 0.6706, 0.6824, 0.6941, 0.7098, 0.7216, 0.7333, 0.7412, 0.7529, 0.7569, 0.7608, 0.7647, 0.7608, 0.7608, 0.7569, 0.749, 0.7451, 0.7373],
          [0.0627, 0.0784, 0.102, 0.1294, 0.1647, 0.2, 0.2431, 0.2902, 0.3412, 0.3922, 0.4431, 0.4941, 0.5373, 0.5765, 0.6118, 0.6392, 0.6588, 0.6745, 0.6824, 0.6863, 0.6902, 0.6863, 0.6863, 0.6824, 0.6784, 0.6745, 0.6706, 0.6667, 0.6627, 0.6627, 0.6627, 0.6627, 0.6627, 0.6627, 0.6667, 0.6667, 0.6706, 0.6745, 0.6784, 0.6824, 0.6863, 0.6902, 0.6941, 0.702, 0.7098, 0.7176, 0.7255, 0.7333, 0.7451, 0.7569, 0.7647, 0.7765, 0.7882, 0.7961, 0.8039, 0.8118, 0.8157, 0.8157, 0.8157, 0.8157, 0.8118, 0.8039, 0.8, 0.7961],
          [0.0706, 0.0863, 0.1137, 0.1412, 0.1804, 0.2196, 0.2706, 0.3216, 0.3765, 0.4314, 0.4863, 0.5373, 0.5882, 0.6314, 0.6706, 0.698, 0.7216, 0.7333, 0.7451, 0.749, 0.7529, 0.749, 0.7451, 0.7451, 0.7412, 0.7373, 0.7333, 0.7294, 0.7294, 0.7255, 0.7255, 0.7255, 0.7255, 0.7294, 0.7294, 0.7333, 0.7333, 0.7373, 0.7412, 0.7451, 0.749, 0.7529, 0.7569, 0.7608, 0.7686, 0.7725, 0.7804, 0.7882, 0.7961, 0.8078, 0.8157, 0.8275, 0.8353, 0.8431, 0.851, 0.8588, 0.8627, 0.8627, 0.8627, 0.8627, 0.8588, 0.8549, 0.8471, 0.8431],
          [0.0745, 0.0941, 0.1216, 0.1569, 0.1961, 0.2392, 0.2902, 0.3451, 0.4039, 0.4627, 0.5216, 0.5804, 0.6314, 0.6784, 0.7176, 0.749, 0.7725, 0.7882, 0.8, 0.8039, 0.8039, 0.8039, 0.8, 0.7961, 0.7922, 0.7922, 0.7882, 0.7843, 0.7843, 0.7843, 0.7843, 0.7843, 0.7843, 0.7882, 0.7882, 0.7882, 0.7922, 0.7961, 0.7961, 0.8, 0.8039, 0.8078, 0.8118, 0.8157, 0.8196, 0.8235, 0.8314, 0.8353, 0.8431, 0.851, 0.8588, 0.8667, 0.8745, 0.8824, 0.8902, 0.8941, 0.898, 0.898, 0.898, 0.898, 0.8941, 0.8941, 0.8902, 0.8863],
          [0.0784, 0.102, 0.1294, 0.1608, 0.2039, 0.2549, 0.3059, 0.3686, 0.4314, 0.4902, 0.5529, 0.6118, 0.6667, 0.7176, 0.7569, 0.7922, 0.8157, 0.8314, 0.8431, 0.8471, 0.851, 0.851, 0.8471, 0.8431, 0.8431, 0.8392, 0.8392, 0.8353, 0.8353, 0.8353, 0.8353, 0.8353, 0.8353, 0.8353, 0.8392, 0.8392, 0.8431, 0.8431, 0.8471, 0.8471, 0.851, 0.851, 0.8549, 0.8588, 0.8627, 0.8667, 0.8706, 0.8745, 0.8784, 0.8863, 0.8902, 0.898, 0.902, 0.9098, 0.9176, 0.9216, 0.9255, 0.9294, 0.9294, 0.9294, 0.9255, 0.9255, 0.9216, 0.9176],
          [0.0863, 0.1059, 0.1373, 0.1686, 0.2118, 0.2627, 0.3176, 0.3804, 0.4471, 0.5098, 0.5765, 0.6392, 0.6941, 0.7451, 0.7882, 0.8196, 0.8471, 0.8667, 0.8784, 0.8824, 0.8863, 0.8863, 0.8863, 0.8824, 0.8824, 0.8784, 0.8784, 0.8784, 0.8784, 0.8745, 0.8745, 0.8784, 0.8784, 0.8784, 0.8784, 0.8824, 0.8824, 0.8863, 0.8863, 0.8863, 0.8902, 0.8902, 0.8941, 0.8941, 0.8941, 0.898, 0.898, 0.902, 0.9059, 0.9098, 0.9137, 0.9176, 0.9255, 0.9294, 0.9333, 0.9412, 0.9451, 0.9451, 0.949, 0.949, 0.9451, 0.9451, 0.9412, 0.9412],
          [0.0863, 0.1098, 0.1373, 0.1765, 0.2196, 0.2706, 0.3294, 0.3922, 0.4549, 0.5255, 0.5882, 0.6549, 0.7098, 0.7647, 0.8078, 0.8392, 0.8706, 0.8863, 0.902, 0.9098, 0.9137, 0.9137, 0.9137, 0.9137, 0.9137, 0.9098, 0.9098, 0.9098, 0.9098, 0.9098, 0.9098, 0.9098, 0.9098, 0.9098, 0.9137, 0.9137, 0.9137, 0.9176, 0.9176, 0.9176, 0.9176, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9216, 0.9255, 0.9255, 0.9294, 0.9333, 0.9412, 0.9451, 0.949, 0.9529, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9529],
          [0.0902, 0.1137, 0.1412, 0.1804, 0.2235, 0.2745, 0.3373, 0.3961, 0.4627, 0.5294, 0.5961, 0.6627, 0.7176, 0.7686, 0.8157, 0.851, 0.8784, 0.898, 0.9137, 0.9255, 0.9294, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9333, 0.9373, 0.9373, 0.9373, 0.9373, 0.9373, 0.9373, 0.9412, 0.9412, 0.9373, 0.9373, 0.9373, 0.9333, 0.9333, 0.9294, 0.9294, 0.9294, 0.9294, 0.9333, 0.9373, 0.9412, 0.9451, 0.949, 0.9529, 0.9569, 0.9608, 0.9608, 0.9608, 0.9608, 0.9608, 0.9569],
          [0.0902, 0.1137, 0.1451, 0.1843, 0.2275, 0.2784, 0.3373, 0.3961, 0.4627, 0.5255, 0.5961, 0.6588, 0.7137, 0.7686, 0.8118, 0.851, 0.8784, 0.902, 0.9176, 0.9294, 0.9373, 0.9412, 0.9451, 0.9451, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.949, 0.9529, 0.9529, 0.9529, 0.9529, 0.949, 0.949, 0.949, 0.9451, 0.9412, 0.9373, 0.9373, 0.9333, 0.9294, 0.9255, 0.9255, 0.9255, 0.9294, 0.9333, 0.9373, 0.9412, 0.9451, 0.949, 0.9529, 0.9569, 0.9569, 0.9569, 0.9569, 0.9529],
          [0.0941, 0.1176, 0.149, 0.1843, 0.2275, 0.2784, 0.3333, 0.3922, 0.4588, 0.5216, 0.5843, 0.6471, 0.7059, 0.7569, 0.8, 0.8392, 0.8667, 0.8941, 0.9098, 0.9255, 0.9333, 0.9412, 0.9451, 0.949, 0.949, 0.9529, 0.9529, 0.9529, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9569, 0.9529, 0.9529, 0.9529, 0.949, 0.9451, 0.9412, 0.9333, 0.9294, 0.9216, 0.9176, 0.9137, 0.9098, 0.9098, 0.9137, 0.9176, 0.9216, 0.9255, 0.9294, 0.9333, 0.9373, 0.9412, 0.9451, 0.9451, 0.9451, 0.9412],
          [0.098, 0.1216, 0.149, 0.1843, 0.2275, 0.2784, 0.3294, 0.3882, 0.451, 0.5098, 0.5725, 0.6314, 0.6863, 0.7373, 0.7804, 0.8196, 0.851, 0.8745, 0.8941, 0.9098, 0.9216, 0.9294, 0.9373, 0.9412, 0.9451, 0.949, 0.949, 0.949, 0.9529, 0.9529, 0.9529, 0.9529, 0.9529, 0.9529, 0.9529, 0.9529, 0.949, 0.949, 0.949, 0.949, 0.9451, 0.9412, 0.9373, 0.9333, 0.9255, 0.9176, 0.9137, 0.9059, 0.898, 0.8941, 0.8902, 0.8863, 0.8902, 0.8941, 0.898, 0.902, 0.9098, 0.9137, 0.9176, 0.9216, 0.9255, 0.9255, 0.9255, 0.9255],
          [0.102, 0.1255, 0.1529, 0.1882, 0.2314, 0.2745, 0.3255, 0.3843, 0.4392, 0.498, 0.5529, 0.6157, 0.6627, 0.7137, 0.7529, 0.7922, 0.8235, 0.851, 0.8706, 0.8863, 0.902, 0.9098, 0.9176, 0.9255, 0.9294, 0.9333, 0.9373, 0.9373, 0.9412, 0.9412, 0.9412, 0.9412, 0.9412, 0.9412, 0.9373, 0.9373, 0.9373, 0.9373, 0.9333, 0.9333, 0.9294, 0.9255, 0.9216, 0.9137, 0.9059, 0.898, 0.8863, 0.8784, 0.8706, 0.8627, 0.8588, 0.8588, 0.8588, 0.8627, 0.8667, 0.8745, 0.8824, 0.8863, 0.8941, 0.898, 0.898, 0.902, 0.902, 0.902],
          [0.1098, 0.1333, 0.1608, 0.1961, 0.2353, 0.2784, 0.3255, 0.3765, 0.4314, 0.4863, 0.5412, 0.5922, 0.6431, 0.6863, 0.7294, 0.7647, 0.7922, 0.8196, 0.8431, 0.8588, 0.8745, 0.8863, 0.8941, 0.902, 0.9059, 0.9137, 0.9137, 0.9176, 0.9176, 0.9216, 0.9216, 0.9216, 0.9216, 0.9176, 0.9176, 0.9176, 0.9137, 0.9137, 0.9098, 0.9059, 0.902, 0.898, 0.8902, 0.8824, 0.8745, 0.8627, 0.8549, 0.8431, 0.8353, 0.8275, 0.8235, 0.8235, 0.8235, 0.8275, 0.8353, 0.8431, 0.851, 0.8549, 0.8627, 0.8667, 0.8706, 0.8745, 0.8745, 0.8745],
          [0.1255, 0.1451, 0.1725, 0.2039, 0.2431, 0.2863, 0.3294, 0.3765, 0.4314, 0.4784, 0.5294, 0.5765, 0.6196, 0.6588, 0.698, 0.7294, 0.7608, 0.7843, 0.8078, 0.8235, 0.8392, 0.851, 0.8627, 0.8706, 0.8745, 0.8824, 0.8824, 0.8863, 0.8902, 0.8902, 0.8902, 0.8902, 0.8902, 0.8863, 0.8863, 0.8863, 0.8824, 0.8784, 0.8745, 0.8706, 0.8667, 0.8588, 0.851, 0.8431, 0.8353, 0.8235, 0.8118, 0.8, 0.7922, 0.7882, 0.7843, 0.7843, 0.7843, 0.7922, 0.7961, 0.8078, 0.8157, 0.8235, 0.8314, 0.8353, 0.8392, 0.8431, 0.8431, 0.8431],
          [0.1412, 0.1608, 0.1882, 0.2196, 0.2549, 0.298, 0.3412, 0.3843, 0.4314, 0.4745, 0.5176, 0.5608, 0.6, 0.6353, 0.6667, 0.698, 0.7255, 0.749, 0.7647, 0.7843, 0.7961, 0.8118, 0.8196, 0.8275, 0.8353, 0.8392, 0.8431, 0.8471, 0.851, 0.851, 0.851, 0.851, 0.851, 0.851, 0.8471, 0.8471, 0.8431, 0.8392, 0.8353, 0.8275, 0.8235, 0.8157, 0.8078, 0.7961, 0.7843, 0.7725, 0.7647, 0.7529, 0.7451, 0.7412, 0.7373, 0.7373, 0.7412, 0.749, 0.7608, 0.7686, 0.7804, 0.7882, 0.8, 0.8078, 0.8118, 0.8157, 0.8196, 0.8196],
          [0.1608, 0.1804, 0.2078, 0.2392, 0.2784, 0.3137, 0.3569, 0.4, 0.4392, 0.4784, 0.5176, 0.5529, 0.5843, 0.6157, 0.6431, 0.6706, 0.6902, 0.7098, 0.7255, 0.7412, 0.7529, 0.7647, 0.7725, 0.7804, 0.7882, 0.7922, 0.7961, 0.8, 0.8, 0.8039, 0.8039, 0.8039, 0.8, 0.8, 0.7961, 0.7961, 0.7922, 0.7882, 0.7804, 0.7765, 0.7686, 0.7608, 0.7529, 0.7412, 0.7294, 0.7216, 0.7098, 0.702, 0.6941, 0.6902, 0.6902, 0.6941, 0.702, 0.7098, 0.7216, 0.7333, 0.749, 0.7608, 0.7725, 0.7804, 0.7882, 0.7922, 0.7961, 0.7961],
          [0.1882, 0.2078, 0.2392, 0.2706, 0.3059, 0.3412, 0.3804, 0.4196, 0.4588, 0.4902, 0.5255, 0.5529, 0.5804, 0.6039, 0.6235, 0.6431, 0.6588, 0.6745, 0.6863, 0.698, 0.7059, 0.7137, 0.7216, 0.7294, 0.7333, 0.7373, 0.7412, 0.7451, 0.7451, 0.749, 0.749, 0.749, 0.7451, 0.7451, 0.7412, 0.7373, 0.7333, 0.7294, 0.7255, 0.7176, 0.7098, 0.702, 0.6902, 0.6824, 0.6706, 0.6627, 0.6549, 0.6471, 0.6431, 0.6431, 0.6471, 0.6549, 0.6627, 0.6745, 0.6902, 0.7059, 0.7216, 0.7333, 0.749, 0.7569, 0.7686, 0.7725, 0.7765, 0.7804],
          [0.2196, 0.2431, 0.2706, 0.302, 0.3412, 0.3765, 0.4118, 0.4471, 0.4824, 0.5137, 0.5412, 0.5608, 0.5804, 0.6, 0.6118, 0.6235, 0.6314, 0.6392, 0.6471, 0.651, 0.6588, 0.6627, 0.6667, 0.6706, 0.6745, 0.6784, 0.6784, 0.6824, 0.6824, 0.6863, 0.6863, 0.6863, 0.6824, 0.6824, 0.6784, 0.6745, 0.6706, 0.6627, 0.6588, 0.651, 0.6431, 0.6353, 0.6275, 0.6157, 0.6078, 0.6039, 0.5961, 0.5961, 0.5961, 0.5961, 0.6039, 0.6157, 0.6275, 0.6431, 0.6627, 0.6824, 0.698, 0.7176, 0.7333, 0.7451, 0.7569, 0.7647, 0.7686, 0.7725],
          [0.2549, 0.2784, 0.3098, 0.3451, 0.3804, 0.4157, 0.451, 0.4863, 0.5176, 0.5412, 0.5647, 0.5804, 0.5922, 0.6039, 0.6078, 0.6118, 0.6118, 0.6157, 0.6118, 0.6118, 0.6118, 0.6118, 0.6118, 0.6118, 0.6118, 0.6118, 0.6118, 0.6157, 0.6157, 0.6157, 0.6157, 0.6157, 0.6118, 0.6118, 0.6078, 0.6039, 0.6, 0.5922, 0.5882, 0.5804, 0.5725, 0.5686, 0.5608, 0.5529, 0.549, 0.5451, 0.5412, 0.5451, 0.549, 0.5569, 0.5686, 0.5843, 0.6, 0.6196, 0.6431, 0.6667, 0.6863, 0.7059, 0.7255, 0.7412, 0.7529, 0.7608, 0.7686, 0.7725],
          [0.2941, 0.3216, 0.3569, 0.3922, 0.4275, 0.4627, 0.498, 0.5294, 0.5569, 0.5804, 0.5961, 0.6078, 0.6118, 0.6157, 0.6118, 0.6078, 0.6, 0.5922, 0.5843, 0.5765, 0.5686, 0.5647, 0.5569, 0.5529, 0.549, 0.5451, 0.5451, 0.5451, 0.5451, 0.5412, 0.5412, 0.5412, 0.5412, 0.5373, 0.5333, 0.5333, 0.5255, 0.5216, 0.5176, 0.5098, 0.5059, 0.498, 0.4941, 0.4902, 0.4902, 0.4902, 0.4941, 0.498, 0.5098, 0.5216, 0.5412, 0.5608, 0.5843, 0.6078, 0.6314, 0.6588, 0.6824, 0.7059, 0.7255, 0.7451, 0.7569, 0.7686, 0.7804, 0.7843],
          [0.3412, 0.3686, 0.4039, 0.4392, 0.4784, 0.5137, 0.549, 0.5804, 0.6039, 0.6235, 0.6353, 0.6392, 0.6392, 0.6353, 0.6235, 0.6118, 0.5961, 0.5804, 0.5647, 0.549, 0.5333, 0.5176, 0.5059, 0.498, 0.4902, 0.4824, 0.4784, 0.4745, 0.4706, 0.4706, 0.4706, 0.4667, 0.4667, 0.4627, 0.4627, 0.4588, 0.4549, 0.451, 0.4471, 0.4431, 0.4392, 0.4353, 0.4314, 0.4314, 0.4353, 0.4431, 0.451, 0.4627, 0.4784, 0.498, 0.5216, 0.549, 0.5765, 0.6039, 0.6314, 0.6627, 0.6902, 0.7137, 0.7373, 0.7569, 0.7725, 0.7843, 0.7961, 0.8039],
          [0.3882, 0.4196, 0.4549, 0.4941, 0.5333, 0.5686, 0.6039, 0.6314, 0.6549, 0.6706, 0.6784, 0.6784, 0.6745, 0.6627, 0.6431, 0.6235, 0.6, 0.5765, 0.549, 0.5255, 0.502, 0.4824, 0.4627, 0.4471, 0.4314, 0.4235, 0.4118, 0.4078, 0.4039, 0.4, 0.3961, 0.3961, 0.3961, 0.3922, 0.3882, 0.3882, 0.3843, 0.3804, 0.3765, 0.3765, 0.3725, 0.3725, 0.3765, 0.3804, 0.3882, 0.4, 0.4157, 0.4353, 0.4588, 0.4863, 0.5137, 0.5451, 0.5765, 0.6118, 0.6431, 0.6745, 0.7059, 0.7333, 0.7569, 0.7765, 0.7961, 0.8078, 0.8196, 0.8275],
          [0.4353, 0.4667, 0.5059, 0.5451, 0.5843, 0.6235, 0.6588, 0.6863, 0.7059, 0.7176, 0.7255, 0.7216, 0.7098, 0.6902, 0.6667, 0.6392, 0.6078, 0.5765, 0.5451, 0.5098, 0.4824, 0.451, 0.4235, 0.4, 0.3804, 0.3647, 0.3529, 0.3451, 0.3373, 0.3333, 0.3294, 0.3255, 0.3255, 0.3216, 0.3216, 0.3176, 0.3176, 0.3137, 0.3137, 0.3137, 0.3176, 0.3216, 0.3294, 0.3373, 0.3529, 0.3725, 0.3961, 0.4196, 0.451, 0.4824, 0.5176, 0.5569, 0.5922, 0.6275, 0.6627, 0.698, 0.7294, 0.7569, 0.7804, 0.8039, 0.8196, 0.8353, 0.8471, 0.8549],
          [0.4824, 0.5176, 0.5569, 0.5961, 0.6353, 0.6745, 0.7098, 0.7373, 0.7569, 0.7686, 0.7686, 0.7608, 0.7451, 0.7255, 0.698, 0.6627, 0.6275, 0.5882, 0.549, 0.5059, 0.4667, 0.4275, 0.3961, 0.3647, 0.3373, 0.3176, 0.302, 0.2863, 0.2784, 0.2706, 0.2667, 0.2627, 0.2588, 0.2588, 0.2588, 0.2549, 0.2549, 0.2549, 0.2588, 0.2627, 0.2667, 0.2745, 0.2902, 0.3059, 0.3255, 0.3529, 0.3804, 0.4157, 0.451, 0.4902, 0.5333, 0.5725, 0.6157, 0.651, 0.6902, 0.7255, 0.7569, 0.7843, 0.8078, 0.8314, 0.8471, 0.8627, 0.8745, 0.8824],
          [0.5294, 0.5647, 0.6, 0.6431, 0.6824, 0.7216, 0.7569, 0.7843, 0.8039, 0.8118, 0.8118, 0.8039, 0.7843, 0.7608, 0.7294, 0.6902, 0.6471, 0.6, 0.5529, 0.5098, 0.4627, 0.4157, 0.3725, 0.3373, 0.3059, 0.2784, 0.2549, 0.2392, 0.2235, 0.2157, 0.2118, 0.2039, 0.2039, 0.2, 0.2, 0.2, 0.2039, 0.2039, 0.2118, 0.2196, 0.2275, 0.2431, 0.2627, 0.2863, 0.3137, 0.3451, 0.3804, 0.4196, 0.4667, 0.5098, 0.5569, 0.6, 0.6431, 0.6863, 0.7216, 0.7569, 0.7882, 0.8157, 0.8392, 0.8588, 0.8784, 0.8902, 0.898, 0.9059],
          [0.5686, 0.6078, 0.6471, 0.6863, 0.7255, 0.7647, 0.7961, 0.8235, 0.8431, 0.851, 0.851, 0.8392, 0.8196, 0.7922, 0.7608, 0.7176, 0.6745, 0.6235, 0.5686, 0.5137, 0.4627, 0.4118, 0.3647, 0.3216, 0.2824, 0.2471, 0.2196, 0.2, 0.1843, 0.1725, 0.1647, 0.1569, 0.1569, 0.1529, 0.1529, 0.1569, 0.1569, 0.1647, 0.1725, 0.1843, 0.2, 0.2196, 0.2431, 0.2745, 0.3098, 0.349, 0.3922, 0.4392, 0.4902, 0.5373, 0.5843, 0.6353, 0.6784, 0.7216, 0.7569, 0.7922, 0.8235, 0.8471, 0.8706, 0.8902, 0.9059, 0.9176, 0.9255, 0.9333],
          [0.6078, 0.6431, 0.6824, 0.7255, 0.7647, 0.8039, 0.8353, 0.8627, 0.8784, 0.8863, 0.8824, 0.8745, 0.851, 0.8235, 0.7922, 0.749, 0.698, 0.6431, 0.5922, 0.5294, 0.4745, 0.4157, 0.3647, 0.3137, 0.2667, 0.2314, 0.1961, 0.1686, 0.149, 0.1373, 0.1255, 0.1176, 0.1176, 0.1137, 0.1137, 0.1176, 0.1255, 0.1333, 0.1451, 0.1608, 0.1804, 0.2039, 0.2392, 0.2745, 0.3176, 0.3608, 0.4118, 0.4627, 0.5176, 0.5725, 0.6235, 0.6706, 0.7176, 0.7569, 0.7961, 0.8275, 0.8549, 0.8784, 0.898, 0.9137, 0.9294, 0.9373, 0.9451, 0.9529],
          [0.6431, 0.6745, 0.7137, 0.7569, 0.7961, 0.8314, 0.8627, 0.8902, 0.9059, 0.9137, 0.9098, 0.898, 0.8824, 0.851, 0.8196, 0.7765, 0.7255, 0.6745, 0.6118, 0.5529, 0.4902, 0.4275, 0.3686, 0.3137, 0.2627, 0.2157, 0.1804, 0.149, 0.1255, 0.1098, 0.098, 0.0902, 0.0863, 0.0824, 0.0863, 0.0902, 0.098, 0.1098, 0.1255, 0.1451, 0.1686, 0.2039, 0.2392, 0.2824, 0.3294, 0.3843, 0.4392, 0.4941, 0.5529, 0.6078, 0.6627, 0.7098, 0.7569, 0.7961, 0.8314, 0.8627, 0.8863, 0.9059, 0.9255, 0.9373, 0.949, 0.9569, 0.9647, 0.9686],
          [0.6745, 0.7059, 0.7451, 0.7882, 0.8235, 0.8588, 0.8902, 0.9137, 0.9294, 0.9333, 0.9333, 0.9216, 0.9059, 0.8784, 0.8431, 0.8039, 0.7529, 0.702, 0.6392, 0.5765, 0.5137, 0.4471, 0.3843, 0.3216, 0.2667, 0.2196, 0.1725, 0.1373, 0.1137, 0.0902, 0.0784, 0.0667, 0.0627, 0.0627, 0.0627, 0.0706, 0.0784, 0.0941, 0.1137, 0.1373, 0.1686, 0.2039, 0.251, 0.298, 0.3529, 0.4118, 0.4706, 0.5333, 0.5922, 0.651, 0.702, 0.749, 0.7922, 0.8314, 0.8627, 0.8902, 0.9137, 0.9294, 0.9451, 0.9569, 0.9647, 0.9725, 0.9765, 0.9804],
          [0.698, 0.7333, 0.7686, 0.8078, 0.8471, 0.8784, 0.9059, 0.9294, 0.9451, 0.949, 0.949, 0.9412, 0.9216, 0.898, 0.8667, 0.8275, 0.7804, 0.7294, 0.6706, 0.6078, 0.5412, 0.4706, 0.4039, 0.3412, 0.2784, 0.2275, 0.1765, 0.1412, 0.1098, 0.0863, 0.0667, 0.0549, 0.051, 0.0471, 0.051, 0.0588, 0.0706, 0.0863, 0.1098, 0.1373, 0.1725, 0.2157, 0.2627, 0.3216, 0.3804, 0.4431, 0.5098, 0.5686, 0.6314, 0.6902, 0.7412, 0.7882, 0.8275, 0.8627, 0.8941, 0.9176, 0.9373, 0.949, 0.9608, 0.9725, 0.9765, 0.9804, 0.9843, 0.9882],
          [0.7176, 0.7529, 0.7882, 0.8275, 0.8627, 0.8941, 0.9216, 0.9412, 0.9569, 0.9647, 0.9608, 0.9529, 0.9373, 0.9176, 0.8863, 0.851, 0.8078, 0.7569, 0.698, 0.6353, 0.5725, 0.502, 0.4314, 0.3686, 0.302, 0.2431, 0.1922, 0.149, 0.1137, 0.0863, 0.0667, 0.051, 0.0471, 0.0431, 0.0471, 0.0549, 0.0667, 0.0863, 0.1098, 0.1451, 0.1843, 0.2353, 0.2863, 0.3451, 0.4118, 0.4784, 0.5451, 0.6118, 0.6706, 0.7255, 0.7804, 0.8235, 0.8588, 0.8941, 0.9176, 0.9373, 0.9529, 0.9647, 0.9725, 0.9804, 0.9843, 0.9882, 0.9882, 0.9922],
          [0.7333, 0.7647, 0.8039, 0.8392, 0.8745, 0.9059, 0.9294, 0.949, 0.9647, 0.9725, 0.9725, 0.9647, 0.9529, 0.9333, 0.9059, 0.8706, 0.8314, 0.7804, 0.7294, 0.6667, 0.6, 0.5333, 0.4627, 0.3922, 0.3294, 0.2667, 0.2157, 0.1647, 0.1255, 0.098, 0.0745, 0.0588, 0.0471, 0.0431, 0.0471, 0.0549, 0.0706, 0.0902, 0.1176, 0.1529, 0.2, 0.251, 0.3098, 0.3725, 0.4431, 0.5098, 0.5804, 0.6471, 0.7098, 0.7647, 0.8118, 0.851, 0.8863, 0.9137, 0.9373, 0.9529, 0.9686, 0.9765, 0.9843, 0.9882, 0.9882, 0.9922, 0.9922, 0.9922],
          [0.7451, 0.7765, 0.8118, 0.851, 0.8824, 0.9098, 0.9373, 0.9569, 0.9686, 0.9765, 0.9765, 0.9725, 0.9608, 0.9451, 0.9216, 0.8902, 0.851, 0.8078, 0.7569, 0.702, 0.6353, 0.5725, 0.498, 0.4314, 0.3647, 0.302, 0.2431, 0.1961, 0.1529, 0.1176, 0.0902, 0.0706, 0.0588, 0.0549, 0.0549, 0.0627, 0.0784, 0.102, 0.1333, 0.1686, 0.2157, 0.2745, 0.3373, 0.4039, 0.4745, 0.5412, 0.6157, 0.6824, 0.7412, 0.7961, 0.8392, 0.8784, 0.9137, 0.9373, 0.9529, 0.9686, 0.9765, 0.9843, 0.9882, 0.9922, 0.9922, 0.9961, 0.9961, 0.9961],
          [0.7529, 0.7843, 0.8196, 0.8549, 0.8863, 0.9137, 0.9412, 0.9608, 0.9725, 0.9804, 0.9804, 0.9765, 0.9686, 0.9529, 0.9333, 0.9098, 0.8745, 0.8353, 0.7882, 0.7333, 0.6706, 0.6078, 0.5373, 0.4706, 0.4039, 0.3373, 0.2784, 0.2275, 0.1843, 0.1451, 0.1137, 0.0902, 0.0745, 0.0667, 0.0667, 0.0745, 0.0902, 0.1137, 0.1451, 0.1882, 0.2353, 0.2941, 0.3608, 0.4275, 0.502, 0.5725, 0.6431, 0.7098, 0.7725, 0.8235, 0.8667, 0.902, 0.9294, 0.9529, 0.9686, 0.9804, 0.9882, 0.9922, 0.9922, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961],
          [0.7569, 0.7882, 0.8235, 0.8588, 0.8863, 0.9176, 0.9412, 0.9608, 0.9765, 0.9843, 0.9843, 0.9843, 0.9765, 0.9647, 0.9451, 0.9216, 0.8941, 0.8588, 0.8157, 0.7647, 0.7098, 0.6471, 0.5843, 0.5137, 0.451, 0.3843, 0.3294, 0.2706, 0.2196, 0.1804, 0.1451, 0.1216, 0.102, 0.0902, 0.0863, 0.0902, 0.1059, 0.1294, 0.1608, 0.2039, 0.2549, 0.3137, 0.3804, 0.451, 0.5255, 0.6, 0.6706, 0.7373, 0.7961, 0.8431, 0.8863, 0.9176, 0.9451, 0.9647, 0.9765, 0.9843, 0.9922, 0.9922, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922],
          [0.7569, 0.7882, 0.8235, 0.8549, 0.8863, 0.9176, 0.9412, 0.9608, 0.9765, 0.9843, 0.9882, 0.9843, 0.9804, 0.9725, 0.9569, 0.9373, 0.9098, 0.8784, 0.8392, 0.7961, 0.7412, 0.6824, 0.6235, 0.5608, 0.498, 0.4353, 0.3725, 0.3176, 0.2667, 0.2235, 0.1882, 0.1569, 0.1333, 0.1176, 0.1137, 0.1137, 0.1255, 0.1451, 0.1765, 0.2196, 0.2745, 0.3333, 0.4, 0.4745, 0.5451, 0.6235, 0.6941, 0.7569, 0.8157, 0.8627, 0.902, 0.9333, 0.9569, 0.9725, 0.9843, 0.9882, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922],
          [0.7529, 0.7882, 0.8196, 0.8549, 0.8863, 0.9176, 0.9412, 0.9608, 0.9765, 0.9843, 0.9882, 0.9882, 0.9843, 0.9765, 0.9647, 0.949, 0.9255, 0.898, 0.8627, 0.8235, 0.7765, 0.7216, 0.6667, 0.6039, 0.549, 0.4863, 0.4275, 0.3725, 0.3176, 0.2706, 0.2314, 0.2, 0.1725, 0.1529, 0.1412, 0.1412, 0.149, 0.1686, 0.2, 0.2392, 0.2902, 0.3529, 0.4196, 0.4941, 0.5686, 0.6392, 0.7098, 0.7725, 0.8275, 0.8745, 0.9137, 0.9412, 0.9647, 0.9765, 0.9882, 0.9922, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922],
          [0.7451, 0.7804, 0.8157, 0.8471, 0.8784, 0.9098, 0.9373, 0.9569, 0.9725, 0.9843, 0.9882, 0.9922, 0.9882, 0.9804, 0.9725, 0.9569, 0.9412, 0.9176, 0.8863, 0.8471, 0.8078, 0.7608, 0.7098, 0.6549, 0.6, 0.5373, 0.4863, 0.4275, 0.3765, 0.3255, 0.2824, 0.2471, 0.2157, 0.1922, 0.1765, 0.1725, 0.1765, 0.1922, 0.2196, 0.2588, 0.3059, 0.3647, 0.4353, 0.502, 0.5765, 0.651, 0.7216, 0.7843, 0.8353, 0.8824, 0.9216, 0.949, 0.9686, 0.9804, 0.9882, 0.9961, 0.9961, 1.0, 1.0, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922],
          [0.7333, 0.7686, 0.8039, 0.8392, 0.8745, 0.9059, 0.9333, 0.9569, 0.9725, 0.9843, 0.9882, 0.9922, 0.9922, 0.9882, 0.9804, 0.9686, 0.9529, 0.9333, 0.9059, 0.8745, 0.8392, 0.7961, 0.7529, 0.702, 0.651, 0.5961, 0.5412, 0.4902, 0.4353, 0.3843, 0.3412, 0.302, 0.2667, 0.2392, 0.2196, 0.2078, 0.2078, 0.2196, 0.2431, 0.2745, 0.3216, 0.3804, 0.4431, 0.5098, 0.5882, 0.6549, 0.7216, 0.7843, 0.8431, 0.8863, 0.9216, 0.949, 0.9686, 0.9804, 0.9922, 0.9961, 0.9961, 1.0, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922, 0.9922],
          [0.7176, 0.7529, 0.7922, 0.8314, 0.8667, 0.898, 0.9255, 0.9529, 0.9686, 0.9804, 0.9882, 0.9922, 0.9922, 0.9882, 0.9843, 0.9725, 0.9608, 0.9451, 0.9216, 0.898, 0.8667, 0.8314, 0.7922, 0.7451, 0.698, 0.6471, 0.5961, 0.549, 0.4941, 0.4471, 0.4, 0.3569, 0.3216, 0.2863, 0.2627, 0.2471, 0.2431, 0.2471, 0.2667, 0.2941, 0.3373, 0.3882, 0.4471, 0.5176, 0.5882, 0.6549, 0.7255, 0.7843, 0.8353, 0.8863, 0.9216, 0.9451, 0.9686, 0.9804, 0.9882, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922, 0.9922],
          [0.702, 0.7373, 0.7765, 0.8157, 0.8549, 0.8863, 0.9216, 0.9451, 0.9647, 0.9804, 0.9882, 0.9922, 0.9922, 0.9922, 0.9882, 0.9804, 0.9725, 0.9569, 0.9412, 0.9176, 0.8941, 0.8627, 0.8275, 0.7882, 0.7451, 0.702, 0.6549, 0.6078, 0.5569, 0.5098, 0.4588, 0.4157, 0.3765, 0.3373, 0.3098, 0.2902, 0.2784, 0.2745, 0.2863, 0.3137, 0.349, 0.3961, 0.451, 0.5176, 0.5843, 0.651, 0.7137, 0.7765, 0.8275, 0.8745, 0.9098, 0.9412, 0.9608, 0.9765, 0.9843, 0.9922, 0.9961, 0.9961, 0.9961, 0.9961, 0.9961, 0.9922, 0.9922, 0.9882],
          [0.6824, 0.7176, 0.7569, 0.8, 0.8392, 0.8745, 0.9098, 0.9373, 0.9569, 0.9725, 0.9843, 0.9882, 0.9922, 0.9922, 0.9922, 0.9843, 0.9765, 0.9686, 0.9529, 0.9373, 0.9137, 0.8902, 0.8627, 0.8275, 0.7922, 0.7529, 0.7098, 0.6627, 0.6157, 0.5725, 0.5216, 0.4784, 0.4314, 0.3922, 0.3608, 0.3333, 0.3137, 0.3098, 0.3137, 0.3294, 0.3608, 0.4, 0.451, 0.5098, 0.5765, 0.6431, 0.7059, 0.7647, 0.8157, 0.8627, 0.902, 0.9294, 0.9529, 0.9686, 0.9804, 0.9843, 0.9882, 0.9922, 0.9922, 0.9922, 0.9922, 0.9882, 0.9882, 0.9843],
          [0.6549, 0.6941, 0.7373, 0.7804, 0.8196, 0.8627, 0.898, 0.9255, 0.9529, 0.9686, 0.9804, 0.9882, 0.9922, 0.9922, 0.9922, 0.9882, 0.9804, 0.9765, 0.9647, 0.949, 0.9333, 0.9137, 0.8902, 0.8627, 0.8314, 0.7961, 0.7569, 0.7176, 0.6745, 0.6314, 0.5843, 0.5373, 0.4941, 0.4471, 0.4118, 0.3804, 0.3569, 0.3412, 0.3373, 0.349, 0.3725, 0.4078, 0.451, 0.502, 0.5608, 0.6235, 0.6863, 0.7451, 0.7961, 0.8431, 0.8824, 0.9137, 0.9373, 0.9569, 0.9686, 0.9765, 0.9804, 0.9843, 0.9843, 0.9843, 0.9843, 0.9843, 0.9804, 0.9804],
          [0.6275, 0.6667, 0.7098, 0.7529, 0.8, 0.8431, 0.8784, 0.9137, 0.9412, 0.9608, 0.9725, 0.9804, 0.9882, 0.9922, 0.9922, 0.9882, 0.9882, 0.9804, 0.9725, 0.9647, 0.949, 0.9333, 0.9176, 0.8941, 0.8667, 0.8392, 0.8078, 0.7686, 0.7294, 0.6863, 0.6431, 0.5961, 0.549, 0.5059, 0.4627, 0.4275, 0.3961, 0.3765, 0.3647, 0.3647, 0.3804, 0.4078, 0.4471, 0.4941, 0.549, 0.6039, 0.6627, 0.7176, 0.7725, 0.8157, 0.8588, 0.8941, 0.9176, 0.9373, 0.9529, 0.9647, 0.9686, 0.9725, 0.9765, 0.9765, 0.9765, 0.9725, 0.9725, 0.9686],
          [0.5922, 0.6314, 0.6784, 0.7255, 0.7725, 0.8196, 0.8588, 0.898, 0.9255, 0.949, 0.9647, 0.9765, 0.9843, 0.9882, 0.9882, 0.9882, 0.9882, 0.9843, 0.9804, 0.9725, 0.9647, 0.9529, 0.9373, 0.9176, 0.898, 0.8706, 0.8471, 0.8118, 0.7765, 0.7373, 0.698, 0.651, 0.6039, 0.5608, 0.5137, 0.4706, 0.4353, 0.4078, 0.3922, 0.3843, 0.3882, 0.4078, 0.4353, 0.4784, 0.5255, 0.5765, 0.6314, 0.6902, 0.7373, 0.7882, 0.8275, 0.8627, 0.8941, 0.9137, 0.9333, 0.9451, 0.9529, 0.9569, 0.9608, 0.9608, 0.9608, 0.9608, 0.9569, 0.9569],
          [0.5569, 0.5961, 0.6431, 0.6941, 0.7451, 0.7922, 0.8314, 0.8745, 0.9059, 0.9333, 0.949, 0.9647, 0.9765, 0.9804, 0.9843, 0.9882, 0.9882, 0.9882, 0.9843, 0.9804, 0.9725, 0.9647, 0.9529, 0.9412, 0.9216, 0.902, 0.8784, 0.851, 0.8196, 0.7843, 0.7451, 0.7059, 0.6588, 0.6078, 0.5647, 0.5137, 0.4745, 0.4392, 0.4157, 0.4, 0.3961, 0.4039, 0.4275, 0.4588, 0.502, 0.5451, 0.6, 0.651, 0.702, 0.749, 0.7922, 0.8314, 0.8588, 0.8863, 0.902, 0.9176, 0.9255, 0.9333, 0.9373, 0.9373, 0.9373, 0.9333, 0.9333, 0.9294],
          [0.5137, 0.5569, 0.6039, 0.6549, 0.7059, 0.7608, 0.8039, 0.8471, 0.8824, 0.9137, 0.9333, 0.9529, 0.9647, 0.9725, 0.9804, 0.9843, 0.9882, 0.9882, 0.9882, 0.9843, 0.9804, 0.9765, 0.9686, 0.9569, 0.9451, 0.9294, 0.9098, 0.8863, 0.8588, 0.8275, 0.7882, 0.749, 0.7059, 0.6588, 0.6078, 0.5569, 0.5098, 0.4706, 0.4392, 0.4157, 0.4039, 0.4039, 0.4157, 0.4392, 0.4745, 0.5176, 0.5608, 0.6118, 0.6588, 0.7059, 0.749, 0.7882, 0.8196, 0.8471, 0.8667, 0.8824, 0.8941, 0.902, 0.9059, 0.9059, 0.9059, 0.9059, 0.902, 0.898],
          [0.4745, 0.5137, 0.5608, 0.6157, 0.6667, 0.7176, 0.7686, 0.8118, 0.8549, 0.8863, 0.9098, 0.9333, 0.949, 0.9608, 0.9725, 0.9804, 0.9843, 0.9882, 0.9882, 0.9882, 0.9843, 0.9843, 0.9765, 0.9686, 0.9608, 0.9451, 0.9294, 0.9137, 0.8863, 0.8627, 0.8275, 0.7882, 0.7451, 0.698, 0.6471, 0.5922, 0.5412, 0.498, 0.4588, 0.4275, 0.4078, 0.3961, 0.4039, 0.4196, 0.4431, 0.4784, 0.5216, 0.5647, 0.6118, 0.6588, 0.702, 0.7373, 0.7725, 0.8, 0.8235, 0.8392, 0.851, 0.8627, 0.8667, 0.8667, 0.8667, 0.8627, 0.8588, 0.8549],
          [0.4275, 0.4706, 0.5176, 0.5686, 0.6196, 0.6745, 0.7255, 0.7765, 0.8196, 0.8549, 0.8863, 0.9098, 0.9294, 0.9451, 0.9608, 0.9686, 0.9765, 0.9843, 0.9882, 0.9882, 0.9882, 0.9882, 0.9843, 0.9765, 0.9725, 0.9608, 0.949, 0.9333, 0.9137, 0.8902, 0.8588, 0.8235, 0.7804, 0.7294, 0.6784, 0.6235, 0.5725, 0.5176, 0.4706, 0.4353, 0.4078, 0.3922, 0.3882, 0.3961, 0.4157, 0.4431, 0.4784, 0.5176, 0.5608, 0.6039, 0.6471, 0.6824, 0.7176, 0.7451, 0.7686, 0.7882, 0.8039, 0.8118, 0.8157, 0.8196, 0.8196, 0.8157, 0.8118, 0.8078],
          [0.3804, 0.4196, 0.4706, 0.5216, 0.5765, 0.6275, 0.6824, 0.7333, 0.7804, 0.8196, 0.8549, 0.8863, 0.9098, 0.9294, 0.9451, 0.9569, 0.9686, 0.9765, 0.9804, 0.9843, 0.9882, 0.9882, 0.9843, 0.9843, 0.9765, 0.9725, 0.9608, 0.949, 0.9333, 0.9098, 0.8863, 0.851, 0.8078, 0.7608, 0.7098, 0.651, 0.5961, 0.5412, 0.4863, 0.4431, 0.4078, 0.3843, 0.3686, 0.3686, 0.3804, 0.4, 0.4314, 0.4667, 0.5059, 0.5451, 0.5843, 0.6235, 0.6549, 0.6863, 0.7098, 0.7294, 0.7451, 0.7529, 0.7569, 0.7608, 0.7608, 0.7569, 0.7529, 0.749],
          [0.3373, 0.3765, 0.4196, 0.4667, 0.5255, 0.5765, 0.6353, 0.6863, 0.7333, 0.7804, 0.8196, 0.851, 0.8784, 0.9059, 0.9255, 0.9412, 0.9569, 0.9647, 0.9725, 0.9804, 0.9843, 0.9843, 0.9843, 0.9843, 0.9804, 0.9765, 0.9686, 0.9608, 0.9451, 0.9255, 0.902, 0.8706, 0.8314, 0.7843, 0.7294, 0.6706, 0.6118, 0.549, 0.4941, 0.4431, 0.4039, 0.3725, 0.3529, 0.3451, 0.349, 0.3647, 0.3882, 0.4157, 0.451, 0.4863, 0.5255, 0.5608, 0.5922, 0.6196, 0.6431, 0.6627, 0.6784, 0.6863, 0.6941, 0.698, 0.6941, 0.6941, 0.6902, 0.6863],
          [0.2902, 0.3294, 0.3725, 0.4196, 0.4706, 0.5255, 0.5804, 0.6353, 0.6863, 0.7333, 0.7765, 0.8157, 0.8471, 0.8784, 0.902, 0.9216, 0.9412, 0.9529, 0.9647, 0.9725, 0.9765, 0.9804, 0.9804, 0.9804, 0.9804, 0.9765, 0.9725, 0.9647, 0.9529, 0.9373, 0.9137, 0.8824, 0.8471, 0.8, 0.7451, 0.6863, 0.6235, 0.5608, 0.502, 0.4471, 0.4, 0.3608, 0.3333, 0.3216, 0.3176, 0.3255, 0.3412, 0.3647, 0.3922, 0.4235, 0.4588, 0.4902, 0.5255, 0.5529, 0.5765, 0.5961, 0.6078, 0.6196, 0.6235, 0.6275, 0.6275, 0.6235, 0.6196, 0.6157],
          [0.2471, 0.2824, 0.3255, 0.3686, 0.4235, 0.4745, 0.5294, 0.5843, 0.6392, 0.6902, 0.7373, 0.7765, 0.8118, 0.851, 0.8784, 0.902, 0.9216, 0.9373, 0.9529, 0.9608, 0.9686, 0.9725, 0.9765, 0.9765, 0.9765, 0.9765, 0.9725, 0.9686, 0.9569, 0.9412, 0.9216, 0.8941, 0.8549, 0.8118, 0.7569, 0.6941, 0.6314, 0.5647, 0.502, 0.4431, 0.3882, 0.349, 0.3176, 0.298, 0.2863, 0.2902, 0.298, 0.3176, 0.3412, 0.3686, 0.4, 0.4314, 0.4588, 0.4863, 0.5059, 0.5255, 0.5412, 0.549, 0.5569, 0.5569, 0.5569, 0.5529, 0.549, 0.5451],
          [0.2118, 0.2431, 0.2824, 0.3255, 0.3765, 0.4275, 0.4824, 0.5373, 0.5961, 0.6471, 0.6941, 0.7412, 0.7804, 0.8196, 0.851, 0.8784, 0.902, 0.9216, 0.9373, 0.949, 0.9608, 0.9647, 0.9686, 0.9725, 0.9725, 0.9725, 0.9725, 0.9686, 0.9608, 0.9451, 0.9255, 0.898, 0.8588, 0.8118, 0.7569, 0.698, 0.6314, 0.5647, 0.502, 0.4353, 0.3804, 0.3373, 0.302, 0.2745, 0.2588, 0.2549, 0.2588, 0.2706, 0.2902, 0.3137, 0.3373, 0.3686, 0.3922, 0.4196, 0.4392, 0.4588, 0.4706, 0.4824, 0.4863, 0.4902, 0.4902, 0.4863, 0.4824, 0.4745],
          [0.1725, 0.2039, 0.2392, 0.2824, 0.3294, 0.3804, 0.4353, 0.4902, 0.5451, 0.5961, 0.651, 0.702, 0.7451, 0.7882, 0.8235, 0.8549, 0.8824, 0.9059, 0.9216, 0.9373, 0.949, 0.9569, 0.9608, 0.9647, 0.9686, 0.9686, 0.9686, 0.9647, 0.9569, 0.9412, 0.9216, 0.8941, 0.8588, 0.8118, 0.7569, 0.698, 0.6314, 0.5647, 0.498, 0.4314, 0.3765, 0.3216, 0.2824, 0.251, 0.2353, 0.2235, 0.2235, 0.2314, 0.2471, 0.2627, 0.2863, 0.3098, 0.3333, 0.3569, 0.3765, 0.3961, 0.4078, 0.4196, 0.4235, 0.4275, 0.4275, 0.4235, 0.4196, 0.4157],
          [0.1451, 0.1725, 0.2039, 0.2471, 0.2902, 0.3412, 0.3922, 0.4471, 0.5059, 0.5608, 0.6118, 0.6667, 0.7137, 0.7569, 0.7961, 0.8314, 0.8627, 0.8863, 0.9059, 0.9216, 0.9373, 0.9451, 0.9529, 0.9569, 0.9608, 0.9608, 0.9608, 0.9569, 0.949, 0.9373, 0.9176, 0.8902, 0.8549, 0.8078, 0.7529, 0.6941, 0.6235, 0.5569, 0.4902, 0.4235, 0.3647, 0.3137, 0.2667, 0.2353, 0.2118, 0.2, 0.1961, 0.2, 0.2078, 0.2235, 0.2431, 0.2627, 0.2863, 0.3059, 0.3255, 0.3412, 0.3529, 0.3608, 0.3686, 0.3686, 0.3686, 0.3686, 0.3647, 0.3608],
          [0.1216, 0.1451, 0.1765, 0.2157, 0.2588, 0.3059, 0.3569, 0.4118, 0.4667, 0.5216, 0.5804, 0.6314, 0.6824, 0.7294, 0.7725, 0.8118, 0.8431, 0.8706, 0.8941, 0.9098, 0.9255, 0.9333, 0.9412, 0.949, 0.9529, 0.9529, 0.9529, 0.9529, 0.9451, 0.9333, 0.9137, 0.8863, 0.851, 0.8, 0.749, 0.6863, 0.6196, 0.549, 0.4824, 0.4157, 0.3569, 0.302, 0.2549, 0.2196, 0.1922, 0.1765, 0.1686, 0.1686, 0.1765, 0.1882, 0.2039, 0.2235, 0.2431, 0.2627, 0.2784, 0.2941, 0.3059, 0.3137, 0.3176, 0.3216, 0.3216, 0.3216, 0.3176, 0.3137],
        ];
        console.log(heights.length);

        const ground_initial_corner_point = vec3(-32, 0, -32);
        const ground_row_operation = (s,p) => p ? p.plus(vec3(0, 0, 1)) : ground_initial_corner_point;
        const ground_column_operation = (t,p) => p.plus(vec3(1, 0, 0));
        this.shapes.ground = new defs.Grid_Patch(
            63,
            63,
            ground_row_operation,
            ground_column_operation,
            [[0, 16], [0, 16]]
        );
        this.shapes.ground.arrays.position.forEach( (p, i, a) => {
          let r = Math.floor(i / 64);
          let c = i % 64;
          return a[i] = vec3(p[0], p[1] + 4 * heights[r][c]**2, p[2]);
        });
      }

      render_animation( caller )
      {
        // Called once per frame of animation.
        // Only does some initial setup. Actual drawing is done in Cloth_Demo class.

        // Setup -- This part sets up the scene's overall camera matrix, projection matrix, and lights:
        if( !caller.controls )
        { this.animated_children.push( caller.controls = new defs.Movement_Controls( { uniforms: this.uniforms } ) );
          caller.controls.add_mouse_controls( caller.canvas );

          // Define the global camera and projection matrices, which are stored in shared_uniforms.  The camera
          // matrix follows the usual format for transforms, but with opposite values (cameras exist as
          // inverted matrices).  The projection matrix follows an unusual format and determines how depth is
          // treated when projecting 3D points onto a plane.  The Mat4 functions perspective() or
          // orthographic() automatically generate valid matrices for one.  The input arguments of
          // perspective() are field of view, aspect ratio, and distances to the near plane and far plane.

          // !!! Camera changed here
          //Shader.assign_camera( Mat4.look_at (vec3 (10, 10, 10), vec3 (0, 0, 0), vec3 (0, 1, 0)), this.uniforms );
          Shader.assign_camera( Mat4.look_at (vec3 (15, 1, 28), vec3 (5, 5, 0), vec3 (0, 1, 0)), this.uniforms );
          //Shader.assign_camera( Mat4.look_at (vec3 (0, 8, 20), vec3 (0, 5, 0), vec3 (0, 1, 0)), this.uniforms );
        }
        this.uniforms.projection_transform = Mat4.perspective( Math.PI/4, caller.width/caller.height, 1, 100 );

        // *** Lights: *** Values of vector or point lights.  They'll be consulted by
        // the shader when coloring shapes.  See Light's class definition for inputs.
        const t = this.t = this.uniforms.animation_time/1000;
        const angle = Math.sin(t);

        // const light_position = Mat4.rotation( angle,   1,0,0 ).times( vec4( 0,-1,1,0 ) ); !!!
        // !!! Light changed here
        //const light_position = vec4(20 * Math.cos(angle), 20,  20 * Math.sin(angle), 1.0);
        const light_position = vec4(8, 20, 20, 1.0);
        this.uniforms.lights = [ defs.Phong_Shader.light_source( light_position, color( 1,1,1,1 ), 1000000 ) ];

        // draw axis arrows.
        //this.shapes.axis.draw(caller, this.uniforms, Mat4.identity(), this.materials.rgb);
      }
    }


export class Midpoint_Demo extends Midpoint_Demo_Base
{
  render_animation( caller )
  {
    // Called once per frame of animation.  For each shape that you want to
    // appear onscreen, place a .draw() call for it inside.  Each time, pass in a
    // different matrix value to control where the shape appears.

    // Variables that are in scope for you to use:
    // this.shapes.box:   A vertex array object defining a 2x2x2 cube.
    // this.shapes.ball:  A vertex array object defining a 2x2x2 spherical surface.
    // this.materials.metal:    Selects a shader and draws with a shiny surface.
    // this.materials.plastic:  Selects a shader and draws a more matte surface.
    // this.lights:  A pre-made collection of Light objects.
    // this.hover:  A boolean variable that changes when the user presses a button.
    // shared_uniforms:  Information the shader needs for drawing.  Pass to draw().
    // caller:  Wraps the WebGL rendering context shown onscreen.  Pass to draw().

    // Call the setup code that we left inside the base class:
    super.render_animation( caller );

    const t = this.t = this.uniforms.animation_time / 1000;

    // !!! Draw ground
    const yellow = color( 0.7,1,0,1 );
    let floor_transform = Mat4.translation(0, 0, 0).times(Mat4.scale(10, 0.01, 10));
    //this.shapes.box.draw( caller, this.uniforms, floor_transform, { ...this.materials.plastic, color: yellow } );
    //this.shapes.box.draw( caller, this.uniforms, floor_transform, this.materials.grass );



    // Update the cloth simulation
    let windDir = vec3(0, 0, 0);//(Math.floor(t / 4) % 2 === 0) ? vec3(0.3, 0.3, 1) : vec3(0, 0, 0);
        // vec3(0, 0, 10).times(0.5 + 0.5*Math.sin(t/5)); //vec3(0.5, 0, -0.2);
    this.cloth_sim.update(this.time_step, windDir);

    if (this.isDrawingBall) {
      // Draw the ball
      let ball_center = vec3(2, 5.5, 3 * Math.sin(t/2));
      let ball_transform = Mat4.translation(ball_center[0], ball_center[1], ball_center[2]);
      this.shapes.ball.draw(caller, this.uniforms, ball_transform, this.materials.plastic);

      // Handle collisions between cloth and ball
      this.cloth_sim._handleBallCollision(ball_center, 1.125);
    }


    // TODO: handle collision with box
    let box_center = vec3(3.5, 5.5, 3 * 0.75*Math.sin(t/2)); //vec3(4, 3, 0);
    let box_angle = (t / 2) % (2 * Math.PI);
    let box_transform = Mat4.translation(...box_center)
        .times(Mat4.rotation(box_angle, 0, 1, 0))
        .times(Mat4.scale(0.2, 0.2, 1));
    this.shapes.box.draw(caller, this.uniforms, box_transform, this.materials.plastic);
    this.cloth_sim._handleBoxCollision(
        box_center, 0.4 + 0.25, 0.4 + 0.25, 2.25,
        box_transform
    );


    // Optionally draw cloth simulation particles
    if(this.isDrawingParticles) {
      this.cloth_sim.draw(caller, this.uniforms, this.shapes, this.materials);
    }


    // Update sheet positions
    this.shapes.sheet.arrays.position.forEach( (p, i, a) => {
      let r = Math.floor(i / this.cloth_sim.m);
      let c = i % this.cloth_sim.m;
      return a[i] = this.cloth_sim.particles[r][c].pos;
    });
    /*
    // Update sheet normals
    let normals = this.cloth.getParticleNormals();
    this.shapes.sheet.arrays.normal.forEach( (p, i, a) => {
      let r = Math.floor(i / this.cloth.m);
      let c = i % this.cloth.m;
      return a[i] = normals[r][c];
    });
     */

    // Draw sheet
    this.shapes.sheet.flat_shade();
    this.shapes.sheet.draw(caller, this.uniforms, Mat4.identity(), this.materials.cloth);
    this.shapes.sheet.copy_onto_graphics_card(caller.context, ["position", "normal"], false);


    // Draw pole
    const brown = vec4(123/255, 63/255, 0, 1);
    let pole_transform = Mat4.translation(0, 5.3, 0)
        .times(Mat4.scale(0.1, 5.3, 0.1));
    this.shapes.box.draw(caller, this.uniforms, pole_transform, {...this.materials.plastic, color: brown});
    let pole_arm_transform = Mat4.translation(2 - 0.1, 10, 0)
        .times(Mat4.scale(2, 0.1, 0.1));
    this.shapes.box.draw(caller, this.uniforms, pole_arm_transform, {...this.materials.plastic, color: brown});


    // TODO: Draw terrain?
    this.shapes.ground.flat_shade();
    this.shapes.ground.draw(caller, this.uniforms, Mat4.identity(), this.materials.grass);
  }

  // Sets up a panel of interactive HTML elements, including
  // buttons with key bindings for affecting this scene, and live info readouts.
  render_controls()
  {
    this.control_panel.innerHTML += "Scratch";
    this.new_line();
    this.key_triggered_button( "Toggle particles", ['x'],
        () => this.isDrawingParticles = !this.isDrawingParticles
    );
    this.new_line();
    this.key_triggered_button( "Go to cloth", ['c'],
        () => {
          Shader.assign_camera( Mat4.look_at (vec3 (6, 8.5, 8), vec3 (0, 7, 0), vec3 (0, 1, 0)), this.uniforms );
        }
    );
    this.new_line();
    this.key_triggered_button( "Go to start", ['v'],
        () => {
          Shader.assign_camera( Mat4.look_at (vec3 (15, 1, 28), vec3 (5, 5, 0), vec3 (0, 1, 0)), this.uniforms );
        }
    );
    this.new_line();
    this.key_triggered_button( "Toggle ball", ['b'],
        () => this.isDrawingBall = !this.isDrawingBall
    );
  }
}
